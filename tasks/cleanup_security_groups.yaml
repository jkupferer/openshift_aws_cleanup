---
- name: Get security groups
  command: >-
    aws ec2 --region={{ _region }} describe-security-groups
    --filters "Name=tag-key,Values={% for _cluster_id in _cluster_ids %}{% if not loop.first %},{% endif %}kubernetes.io/cluster/{{ _cluster_id }}{% endfor %}"
  changed_when: false
  register: r_security_groups

- name: Remove ingress rules from security groups
  command: >-
    aws ec2 --region={{ _region }} revoke-security-group-ingress --group-id={{ _group_id }}
    --ip-permissions={{ _ip_permissions | to_json | quote }}
  loop: "{{ r_security_groups.stdout | from_json | json_query('SecurityGroups') }}"
  loop_control:
    loop_var: _group
    label: "{{ _group_name }}"
  vars:
    _group_id: "{{ _group.GroupId }}"
    _group_name: "{{ _group.GroupName }}"
    _ip_permissions: "{{ _group.IpPermissions }}"
  when: _ip_permissions | length > 0

- name: Remove egress rules from security groups
  command: >-
    aws ec2 --region={{ _region }} revoke-security-group-egress --group-id={{ _group_id }}
    --ip-permissions={{ _ip_permissions | to_json | quote }}
  loop: "{{ r_security_groups.stdout | from_json | json_query('SecurityGroups') }}"
  loop_control:
    loop_var: _group
    label: "{{ _group_name }}"
  vars:
    _group_id: "{{ _group.GroupId }}"
    _group_name: "{{ _group.GroupName }}"
    _ip_permissions: "{{ _group.IpPermissionsEgress }}"
  when: _ip_permissions | length > 0

- name: Delete security groups
  command: >-
    aws ec2 --region={{ _region }} delete-security-group --group-id={{ _group_id }}
  loop: "{{ r_security_groups.stdout | from_json | json_query('SecurityGroups') }}"
  loop_control:
    loop_var: _group
    label: "{{ _group_name }}"
  vars:
    _group_id: "{{ _group.GroupId }}"
    _group_name: "{{ _group.GroupName }}"
